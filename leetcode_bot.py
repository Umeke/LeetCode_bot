
# 7768504324:AAER6bx9OA24hxYBK-QlbZJdc1hltyZTYXc
import logging
import datetime
import pytz
import json
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, JobQueue
import requests

# –ë–æ—Ç—Ç—ã“£ –ª–æ–≥—ã–Ω –±–∞–ø—Ç–∞—É
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –∞—Ç–∞—É—ã
USER_STATUS_FILE = "user_status.json"


# –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∫“Ø–π—ñ–Ω —Å–∞“õ—Ç–∞—É –∂”ô–Ω–µ –∂“Ø–∫—Ç–µ—É
def load_user_status():
    if os.path.exists(USER_STATUS_FILE):
        with open(USER_STATUS_FILE, "r", encoding="utf-8") as file:
            try:
                data = json.load(file)

                # –ï–≥–µ—Ä –µ—Å–∫—ñ —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –±–æ–ª—Å–∞, –æ–Ω—ã –∂–∞“£–∞ —Ñ–æ—Ä–º–∞—Ç“õ–∞ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—É
                for chat_id, value in data.items():
                    if "solved_problems" not in value:
                        data[chat_id] = {"solved_problems": [{"title": value["problem"], "solved": value["solved"]}]}

                return data
            except json.JSONDecodeError:
                return {}
    return {}


def save_user_status():
    with open(USER_STATUS_FILE, "w", encoding="utf-8") as file:
        json.dump(user_status, file, indent=4, ensure_ascii=False)


# –ñ–∞“£–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã“£ –µ—Å–µ–±—ñ–Ω –∂“Ø—Ä–≥—ñ–∑—É
user_status = load_user_status()


# LeetCode Medium –¥–µ“£–≥–µ–π—ñ–Ω–¥–µ–≥—ñ –µ—Å–µ–ø—Ç—ñ –∞–ª—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã (—Ç–µ–∫ –ø—Ä–µ–º–∏—É–º –µ–º–µ—Å –µ—Å–µ–ø—Ç–µ—Ä)
import random

def get_leetcode_medium_problem():
    url = "https://leetcode.com/api/problems/algorithms/"
    response = requests.get(url)
    if response.status_code == 200:
        problems = response.json()['stat_status_pairs']
        medium_problems = [p for p in problems if p['difficulty']['level'] == 2 and not p['paid_only']]

        if medium_problems:
            problem = random.choice(medium_problems)  # –ö–µ–∑–¥–µ–π—Å–æ“õ –µ—Å–µ–ø —Ç–∞“£–¥–∞—É
            problem_title = problem['stat']['question__title']
            problem_slug = problem['stat']['question__title_slug']
            problem_url = f"https://leetcode.com/problems/{problem_slug}/"
            return problem_title, problem_url
    return None, None


# –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ –µ—Å–µ–ø –∂—ñ–±–µ—Ä—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
async def send_daily_problem(context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(context.job.data)
    problem_title, problem_url = get_leetcode_medium_problem()

    if problem_title and problem_url:
        message = (
            f"üß† *–ë“Ø–≥—ñ–Ω–≥—ñ LeetCode Medium –µ—Å–µ–ø:*\n\n"
            f"üìö *{problem_title}*\n\n"
            f"üîó [–ï—Å–µ–ø–∫–µ ”©—Ç—É]({problem_url})\n\n"
            "üìù *–®–µ—à—ñ–º—ñ“£—ñ–∑–¥—ñ —Ä–∞—Å—Ç–∞—É–¥—ã “±–º—ã—Ç–ø–∞“£—ã–∑!* –°”ô—Ç—Ç—ñ–ª—ñ–∫! üöÄ"
        )
        await context.bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')

        # –ï–≥–µ—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –±“±—Ä—ã–Ω —Ç—ñ—Ä–∫–µ–ª–º–µ—Å–µ –Ω–µ–º–µ—Å–µ —Ç—ñ–∑—ñ–º—ñ –∂–æ“õ –±–æ–ª—Å–∞, –æ–Ω—ã “õ–æ—Å—É
        if chat_id not in user_status or "solved_problems" not in user_status[chat_id]:
            user_status[chat_id] = {"solved_problems": []}

        # –ñ–∞“£–∞ –µ—Å–µ–ø—Ç—ñ —Ç—ñ–∑—ñ–º–≥–µ “õ–æ—Å—É
        user_status[chat_id]["solved_problems"].append({"title": problem_title, "solved": False})
        save_user_status()
    else:
        await context.bot.send_message(chat_id=chat_id, text="LeetCode —Ç–µ–≥—ñ–Ω –µ—Å–µ–ø—Ç–µ—Ä—ñ–Ω —Ç–∞–±—É–¥–∞ “õ–∏—ã–Ω–¥—ã“õ—Ç–∞—Ä –±–æ–ª–¥—ã. –ö–µ—à—ñ—Ä—ñ“£—ñ–∑.")


# –ï—Å–µ–ø—Ç—ñ –µ—Å–∫–µ —Ç“Ø—Å—ñ—Ä—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
async def remind_unsolved_problem(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data
    user_data = user_status.get(str(chat_id), {})

    if user_data and not user_data.get("solved", True):
        await context.bot.send_message(chat_id=chat_id, text="‚è∞ *–ï—Å–µ–ø—Ç—ñ ”ô–ª—ñ —à—ã“ì–∞—Ä“ì–∞–Ω –∂–æ“õ—Å—ã–∑!* –ö”©—Ä—ñ–ø —à—ã“ì—ã“£—ã–∑.")


# –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –µ—Å–µ–ø—Ç—ñ —à—ã“ì–∞—Ä“ì–∞–Ω—ã–Ω —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω /done –∫–æ–º–∞–Ω–¥–∞—Å—ã
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = str(update.effective_chat.id)

    # –ï–≥–µ—Ä “õ–æ–ª–¥–∞–Ω—É—à—ã –±“±—Ä—ã–Ω –±–æ–ª–º–∞“ì–∞–Ω –±–æ–ª—Å–∞ –Ω–µ–º–µ—Å–µ –æ–Ω—ã“£ —Ç—ñ–∑—ñ–º—ñ –∂–æ“õ –±–æ–ª—Å–∞
    if chat_id not in user_status or "solved_problems" not in user_status[chat_id] or not user_status[chat_id]["solved_problems"]:
        await update.message.reply_text("‚ùå –°—ñ–∑–≥–µ –µ—Å–µ–ø –∂—ñ–±–µ—Ä—ñ–ª–º–µ–≥–µ–Ω –Ω–µ–º–µ—Å–µ –µ—à“õ–∞–Ω–¥–∞–π —Ç–∞–ø—Å—ã—Ä–º–∞ –æ—Ä—ã–Ω–¥–∞–ª–º–∞–¥—ã.")
        return

    # –°–æ“£“ì—ã —Ç–∞–ø—Å—ã—Ä–º–∞–Ω—ã —à–µ—à—ñ–ª–≥–µ–Ω –¥–µ–ø –±–µ–ª–≥—ñ–ª–µ—É
    last_problem = user_status[chat_id]["solved_problems"][-1]
    if not last_problem["solved"]:
        last_problem["solved"] = True
        save_user_status()
        await update.message.reply_text(f"üéâ –ñ–∞—Ä–∞–π—Å—ã“£! '{last_problem['title']}' –µ—Å–µ–±—ñ —à—ã“ì–∞—Ä—ã–ª–¥—ã –¥–µ–ø –±–µ–ª–≥—ñ–ª–µ–Ω–¥—ñ. üöÄ")
    else:
        await update.message.reply_text("‚úÖ –ë“±–ª –µ—Å–µ–ø—Ç—ñ –±“±—Ä—ã–Ω —à—ã“ì–∞—Ä“ì–∞–Ω—Å—ã–∑.")


# –ë–æ—Ç“õ–∞ START –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –±–µ—Ä—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = str(update.effective_chat.id)
    await update.message.reply_text("–ö“Ø–Ω —Å–∞–π—ã–Ω LeetCode Medium –µ—Å–µ–ø –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ.")

    # JobQueue-“ì–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É
    job_queue = context.job_queue

    if job_queue is None:
        await update.message.reply_text("JobQueue “õ–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å.")
        return

    # –£–∞“õ—ã—Ç –±–µ–ª–¥–µ—É—ñ “Ø—à—ñ–Ω Almaty +05:00 (300 –º–∏–Ω—É—Ç)
    timezone_offset = pytz.FixedOffset(300)

    # –ï—Å–µ–ø—Ç—ñ –∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ 17:31-–¥–µ –∂—ñ–±–µ—Ä—É
    job_queue.run_daily(
        send_daily_problem,
        time=datetime.time(hour=9, minute=0, second=0, tzinfo=timezone_offset),
        data=chat_id,
        name=str(chat_id)
    )

    # –ï—Å–∫–µ —Ç“Ø—Å—ñ—Ä—É–¥—ñ –∫“Ø–Ω–¥–µ 17:30-–¥–∞ –±–∞–ø—Ç–∞—É
    job_queue.run_daily(
        remind_unsolved_problem,
        time=datetime.time(hour=17, minute=30, second=0, tzinfo=timezone_offset),
        data=chat_id,
        name=str(chat_id) + '_reminder'
    )


def main():
    # Application “õ“±—Ä—É
    application = ApplicationBuilder().token('7768504324:AAER6bx9OA24hxYBK-QlbZJdc1hltyZTYXc').build()

    # –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("done", done))

    # JobQueue-–¥—ã –±–∞–ø—Ç–∞—É
    job_queue = JobQueue()
    job_queue.set_application(application)
    job_queue.start()

    # –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
    application.run_polling()


if __name__ == "__main__":
    main()
